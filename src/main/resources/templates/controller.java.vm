package ${package.Controller};

import cn.hutool.core.util.StrUtil;
import cn.hutool.poi.excel.ExcelUtil;
import cn.hutool.poi.excel.ExcelWriter;
import cn.hutool.core.util.ReflectUtil;
import cn.zhanx.project05.utils.TokenUtils;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.baomidou.mybatisplus.core.metadata.IPage;
import org.springframework.web.bind.annotation.*;
import org.springframework.beans.factory.annotation.Autowired;
import java.net.URLEncoder;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;
import cn.zhanx.project05.vo.common.Result;
import cn.zhanx.project05.vo.common.ResultPage;
import ${package.Service}.${table.serviceName};
import ${package.Entity}.${entity};
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletResponse;

#if(${restControllerStyle})
import org.springframework.web.bind.annotation.RestController;
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end

/**
 * <p>
 * $!{table.comment} 前端控制器
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
@Slf4j
@Api(value = "${entity}相关的controller", tags = "${entity}相关的接口")
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end

#else
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end

    @Autowired
    private ${table.serviceName} ${table.entityPath}Service;

    @ApiOperation("查询所有")
    @GetMapping("/list")
    public Result<List<${entity}>> list() {
        return Result.success(${table.entityPath}Service.list(Wrappers.<${entity}>lambdaQuery().orderByAsc(${entity}::getId)));
    }

    @ApiOperation("查询byId")
    @GetMapping("/find/{id}")
    public Result<${entity}> findOne(@PathVariable Integer id) {
        return Result.success(${table.entityPath}Service.getById(id));
    }

    @ApiOperation("新增或更新")
    @PostMapping("/save")
    public Result<Boolean> save(@RequestBody ${entity} ${table.entityPath}){
        if(${table.entityPath}.getId()==null){
            ${table.entityPath}.setCreateTime(System.currentTimeMillis());
        }
        ${table.entityPath}.setUpdateTime(System.currentTimeMillis());
        ${table.entityPath}.setUpdateUser(TokenUtils.getCurrentUser().getUsername());
        return Result.success(${table.entityPath}Service.saveOrUpdate(${table.entityPath}));
    }

    @ApiOperation(value = "删除byId", notes = "")
    @DeleteMapping("/delete/{id}")
    public Result<Boolean> delete(@PathVariable Integer id){
        ${entity} ${table.entityPath}=${table.entityPath}Service.getById(id);
        ${table.entityPath}.setStatus(0);
        ${table.entityPath}.setUpdateTime(System.currentTimeMillis());
        ${table.entityPath}.setUpdateUser(TokenUtils.getCurrentUser().getUsername());
        return Result.success(${table.entityPath}Service.saveOrUpdate(${table.entityPath}));
    }

    @ApiOperation(value = "批量删除", notes = "")
    @PostMapping("/delete/batch")
    public Result<Boolean> batch(@RequestBody List<Integer> ids){
        List<${entity}> ${table.entityPath}List=${table.entityPath}Service.listByIds(ids);
        String updateUser=TokenUtils.getCurrentUser().getUsername();
        ${table.entityPath}List.stream().forEach(item->{
            item.setStatus(0);
            item.setUpdateTime(System.currentTimeMillis());
            item.setUpdateUser(updateUser);
        });
        return Result.success(${table.entityPath}Service.saveOrUpdateBatch(${table.entityPath}List));
    }

    /**
    * 分页查询
    * 第三个变量名称根据情况修改
    */
    @ApiOperation(value = "分页查询", notes = "")
    @GetMapping("/page")
    public ResultPage<List<${entity}>> findPage(@RequestParam("page_num") Integer pageNum,
        @RequestParam("page_size") Integer pageSize,
        @RequestParam(value = "name",defaultValue = "") String name){

        IPage<${entity}> iPage=null;
        if(StrUtil.isBlank(name)) {
            iPage=${table.entityPath}Service.page(new Page<>(pageNum,pageSize),
            Wrappers.<${entity}>lambdaQuery().orderByAsc(${entity}::getId));
        }else {
            iPage=${table.entityPath}Service.page(new Page<>(pageNum, pageSize),
            Wrappers.<${entity}>lambdaQuery().like(${entity}::getName,name).orderByAsc(${entity}::getId));
        }
        return ResultPage.success(iPage.getRecords(),iPage.getTotal(),iPage.getCurrent());
    }

    /**
    * excel 导出
    * @param response
    * @throws Exception
    */
    @GetMapping("/export")
    public void export(HttpServletResponse response) throws Exception{
        List<${entity}> ${table.entityPath}List=${table.entityPath}Service.list();
        ExcelWriter writer= ExcelUtil.getWriter(true);

        List<String> fieldNameList= Arrays.stream(ReflectUtil.getFields(${entity}.class))
        .map(item->item.getName()).collect(Collectors.toList());

        fieldNameList.removeIf(s -> "serialVersionUID".equals(s));

        fieldNameList.forEach(item->{
            switch (item){
                case "id":
                writer.addHeaderAlias(item,"序号");
                break;
            case "name":
                writer.addHeaderAlias(item,"名称");
                break;
            case "updateUser":
                writer.addHeaderAlias(item,"更新用户");
                break;
            case "updateTime":
                writer.addHeaderAlias(item,"更新时间");
                break;
            case "createTime":
                writer.addHeaderAlias(item,"创建时间");
                break;
            case "status":
                writer.addHeaderAlias(item,"状态");
                break;
            default:
                writer.addHeaderAlias(item,item);
            }
        });

        writer.write(${table.entityPath}List,true);

        response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        //test.xls是弹出下载对话框的文件名，不能为中文，中文请自行编码
        String fileName= URLEncoder.encode(System.currentTimeMillis() + "_数据表","UTF-8");
        response.setHeader("Content-Disposition","attachment;filename="+fileName+".xlsx");
        ServletOutputStream out=response.getOutputStream();
        writer.flush(out, true);
        out.close();
        writer.close();

        }

}

#end